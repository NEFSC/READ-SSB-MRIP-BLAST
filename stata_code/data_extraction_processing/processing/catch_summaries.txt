<<dd_version: 2>>

<!---Execute this with:

do $MRIP_BLAST


if strmatch("$user","minyangWin"){
	global project_dir  "V:/READ-SSB-Lee-MRIP-BLAST/" 
}


/* setup directories */
global code_dir "${project_dir}/stata_code"
global working_data "${project_dir}/working_data"
global output_dir "${project_dir}/output"
global this_working_year 2023
global last_year = $this_working_year - 1
global two_years = $this_working_year - 2  
dyndoc "$processing_code/catch_summaries.txt", saving($my_results/catch_summaries_${this_working_year}.html) replace

 ---> 



Effort  statistics 
===============================================================

We use Wave 1-5 data if it is available. Before Wave 5 data is available, we fill in with Wave 5 from the previous year.  As always, we use November and December of <<dd_display: %4.0f $last_year>> in place of November and December of <<dd_display: %4.0f $this_working_year>>. And we will use Jan-April, <<dd_display: %4.0f $this_working_year>> in place of Jan-April, <<dd_display: %4.0f $this_working_year+1>>.

BLAST inputs:

1.  Annual Length-frequency for cod and haddock. 
2.  Monthly Catch-per-trip for cod and haddock. 
3.  Total trips.  We will use FY 2023 data, but use Waves 1 and 2 from 2023  in place of the Waves 1 and 2 of 2024 (as usual). There's no trips in Wave 6.

For haddock, we use the survey weights to compute all catch and effort statistics (lengths and counts for a, b1, and b2).

For cod, we use the survey weights for all catch and effort statistics *except* one.  We use unweighted data to compute the length distribution of the B2s.

~~~~
<<dd_do:quietly>>
/* If you dyndoc this right after running your MRIP data processing code, you can comment this out.*/
do $MRIP_BLAST
global vintage_string 2023_11_08
global my_outputdir "${data_main}/MRIP_$vintage_string/monthly"

global FY_dir "${data_main}/MRIP_$vintage_string/fishing_years"
local my_common1 "atlanticcod"
local my_common2 "haddock"

/*global this_working_year = 2023 */
global last_year = $this_working_year - 1
global two_years = $this_working_year - 2  
<</dd_do>>
~~~~

Here are monthly number of trips in Calendar Years <<dd_display: %4.0f $two_years >> through  <<dd_display: %4.0f $this_working_year>>

~~~~
<<dd_do>>


use "${my_outputdir}/`my_common1'_`my_common2'_target_${two_years}.dta", clear
append using "${my_outputdir}/`my_common1'_`my_common2'_target_${last_year}.dta"
append using "${my_outputdir}/`my_common1'_`my_common2'_target_${this_working_year}.dta"
destring month, replace


qui summ month if year==$this_working_year
local max=r(max)

/* Use previous FY if I don't have wave 5 data yet. */
if `max'<=8{
expand 2 if year==${last_year} & month>`max', gen(tag)
replace year=$this_working_year if tag==1 & month>`max'
}
sort year month 


list year month dtrip, abbreviate(16) sepby(year)
<</dd_do>>
~~~~


Data was processed on <<dd_display: "$vintage_string">>. 


Here are trips, by fishing year:

~~~~
<<dd_do>>

qui summ month if year==$this_working_year
local max=r(max)

/* Use previous FY if I don't have wave 5 data yet. */
if `max'<=8{
expand 2 if year==${last_year} & month>`max', gen(tag)
replace year=$this_working_year if tag==1 & month>`max'
}

cap drop tag
gen fishing_year=year
replace fishing_year=fishing_year-1 if month<=4
/* fillin waves 6, 1 and 2. for the most recent FY.*/

expand 2 if fishing_year==$last_year & inlist(month,1,2,3,4,11,12), gen(tag)
replace fishing_year=$this_working_year if tag==1 
replace year=$this_working_year+1 if tag==1 
drop tag

drop if fishing_year<$two_years 
sort fishing_year
collapse (sum) dtrip, by(fishing_year)

list, abbreviate(16)
<</dd_do>>
~~~~
Data from FY <<dd_display: %4.0f $this_working_year>>.





Trips by Mode  
===============================================================

The regulations for Haddock were different based on mode

Haddock:

*    For-Hire sector: 15 fish with an 18" minimum size.
*    Private Anglers: 10 fish with a 17" minimum size.


~~~~
<<dd_do>>

use "${my_outputdir}/`my_common1'_`my_common2'_target_mode_${two_years}.dta", clear
append using "${my_outputdir}/`my_common1'_`my_common2'_target_mode_${last_year}.dta"
append using "${my_outputdir}/`my_common1'_`my_common2'_target_mode_${this_working_year}.dta"
destring month, replace


qui summ month if year==$this_working_year
local max=r(max)

/* Use previous FY if I don't have wave 5 data yet. */
if `max'<=8{
expand 2 if year==${last_year} & month>`max', gen(tag)
replace year=$this_working_year if tag==1 & month>`max'
}
sort year month mode


list year month mode dtrip if mode=="Private", abbreviate(16) sepby(year)


list year month mode dtrip if mode=="ForHire", abbreviate(16) sepby(year)
<</dd_do>>
~~~~





Trips by Disaggregated Mode  
===============================================================

~~~~
<<dd_do>>

use "${my_outputdir}/`my_common1'_`my_common2'_target_disagg_mode_${two_years}.dta", clear
append using "${my_outputdir}/`my_common1'_`my_common2'_target_disagg_mode_${last_year}.dta"
append using "${my_outputdir}/`my_common1'_`my_common2'_target_disagg_mode_${this_working_year}.dta"
destring month, replace


qui summ month if year==$this_working_year
local max=r(max)

/* Use previous FY if I don't have wave 5 data yet. */
if `max'<=8{
expand 2 if year==${last_year} & month>`max', gen(tag)
replace year=$this_working_year if tag==1 & month>`max'
}
sort year month mode
rename mode mode_disagg
replace mode="Charter" if mode=="CH"
replace mode="Head" if mode=="HE"
replace mode="Private" if mode=="PR"
replace mode="Shore" if mode=="SH"

di "Private"
list year month mode dtrip if mode=="Private", abbreviate(16) sepby(year)

di "Headboat"
list year month mode dtrip if mode=="Head", abbreviate(16) sepby(year)



di "Charter"
list year month mode dtrip if mode=="Charter", abbreviate(16) sepby(year)

di "Shore"
list year month mode dtrip if mode=="Shore", abbreviate(16) sepby(year)

collapse (sum) dtrip, by(year mode)
bysort year: egen t_trip=total(dtrip)
gen pct=dtrip/t_trip * 100
format pct %04.2fc

sort year pct
di "Total"
list year mode dtrip pct , abbreviate(16) sepby(year)



collapse (sum) dtrip, by(mode)
egen t_trip=total(dtrip)
gen pct=dtrip/t_trip * 100
format pct %04.2fc

sort pct
di "Total"
list mode dtrip pct , abbreviate(16)




<</dd_do>>
~~~~





















Catch Statistics for Cod  
===============================================================


Here are the cod (a, b1, b2) in numbers for Calendar Years <<dd_display: %4.0f $two_year>> to <<dd_display: %4.0f $this_working_year>>.  
~~~~
<<dd_do:quietly>>
clear
use "${my_outputdir}/`my_common1'_landings_${two_years}.dta"

sort year month 
format tot_cat* a b1 b2 landings* %10.0fc
<</dd_do>>

<<dd_do>>
list, abbreviate(16)  sum(tot_cat* a b1 b2 landings*) sepby(year)
<</dd_do>>

<<dd_do:quietly>>
clear
use "${my_outputdir}/`my_common1'_landings_${last_year}.dta"
sort year month 
format tot_cat* a b1 b2 landings* %10.0fc
<</dd_do>>

<<dd_do>>
list, abbreviate(16)  sum(tot_cat* a b1 b2 landings*) sepby(year)
<</dd_do>>
~~~~

~~~~
<<dd_do:quietly>>
use "${my_outputdir}/`my_common1'_landings_${this_working_year}.dta", replace


qui summ month
local max=r(max)

if `max'<=9{
preserve
use "${my_outputdir}/`my_common1'_landings_${last_year}.dta", clear
keep if month>`max'
replace year=${this_working_year}
tempfile appender
save `appender'
restore
append using `appender'
}
sort year month


format tot_cat* a b1 b2 landings %10.0fc
<</dd_do>>

<<dd_do>>
list , abbreviate(16)  sum(tot_cat* a b1 b2 landings*)
<</dd_do>>
~~~~



Here are the cod (a, b1, b2) in weights for Calendar Years <<dd_display: %4.0f $two_years>> to <<dd_display: %4.0f $this_working_year>>.  


~~~~
<<dd_do:quietly>>
use "${data_main}/MRIP_${vintage_string}/monthly/cod_weights_${two_years}.dta", clear

gen ab1_lbs_per_fish=ab1weight/ab1_count
gen b2_lbs_per_fish=b2weight/b2_count
format ab1_lbs_per_fish b2_lbs_per_fish %4.3fc

replace ab1weight=ab1weight/2204
rename ab1weight ab1mt
replace b2weight=b2weight/2204
rename b2weight b2mt


replace b2weight_dead=b2weight_dead/2204
rename b2weight_dead b2dead_mt

sort year month 
format ab1mt b2mt %10.2fc
format ab1_count b2_count %10.0fc
keep if year==$two_years
<</dd_do>>

<<dd_do>>
list year month ab1mt b2mt b2dead_mt ab1_count b2_count ab1_lbs_per_fish b2_lbs_per_fish, abbreviate(16) sum(ab1mt b2mt b2dead_mt  ab1_count b2_count) 
<</dd_do>>
~~~~



~~~~
<<dd_do:quietly>>
use "${data_main}/MRIP_${vintage_string}/monthly/cod_weights_${last_year}.dta", clear

gen ab1_lbs_per_fish=ab1weight/ab1_count
gen b2_lbs_per_fish=b2weight/b2_count
format ab1_lbs_per_fish b2_lbs_per_fish %4.3fc

replace ab1weight=ab1weight/2204
rename ab1weight ab1mt
replace b2weight=b2weight/2204
rename b2weight b2mt


replace b2weight_dead=b2weight_dead/2204
rename b2weight_dead b2dead_mt

sort year month 
format ab1mt b2mt %10.2fc
format ab1_count b2_count %10.0fc
keep if year==$last_year
tempfile last 
<</dd_do>>


<<dd_do>>
list year month ab1mt b2mt b2dead_mt ab1_count b2_count ab1_lbs_per_fish b2_lbs_per_fish, abbreviate(16) sum(ab1mt b2mt b2dead_mt  ab1_count b2_count) 
<</dd_do>>
~~~~




~~~~
<<dd_do:quietly>>
use "${data_main}/MRIP_${vintage_string}/monthly/cod_weights_${this_working_year}.dta", clear

qui summ month
local max=r(max)

if `max'<=9{
preserve
use "${my_outputdir}/cod_weights_${last_year}.dta", clear
keep if month>`max'
replace year=${this_working_year}
tempfile appender
save `appender'
restore
append using `appender'
}
sort year month




gen ab1_lbs_per_fish=ab1weight/ab1_count
gen b2_lbs_per_fish=b2weight/b2_count
format ab1_lbs_per_fish b2_lbs_per_fish %4.3fc

replace ab1weight=ab1weight/2204
rename ab1weight ab1mt
replace b2weight=b2weight/2204
rename b2weight b2mt


replace b2weight_dead=b2weight_dead/2204
rename b2weight_dead b2dead_mt

sort year month 
format ab1mt b2mt %10.2fc
format ab1_count b2_count %10.0fc

keep if year==$this_working_year
<</dd_do>>
<<dd_do>>

list year month ab1mt b2mt b2dead_mt ab1_count b2_count ab1_lbs_per_fish b2_lbs_per_fish, abbreviate(16) sum(ab1mt b2mt b2dead_mt  ab1_count b2_count)
<</dd_do>>
~~~~




Catch Statistics for Haddock  
===============================================================


Here are the haddock (a, b1, b2) in numbers for Calendar Years <<dd_display: %4.0f $two_year>> to <<dd_display: %4.0f $this_working_year>>.  
~~~~
<<dd_do:quietly>>
clear
use "${my_outputdir}/`my_common2'_landings_${two_years}.dta"

sort year month 
format tot_cat* a b1 b2 landings* %10.0fc
<</dd_do>>

<<dd_do>>
list, abbreviate(16)  sum(tot_cat* a b1 b2 landings*) sepby(year)
<</dd_do>>

<<dd_do:quietly>>
clear
use "${my_outputdir}/`my_common2'_landings_${last_year}.dta"
sort year month 
format tot_cat* a b1 b2 landings* %10.0fc
<</dd_do>>

<<dd_do>>
list, abbreviate(16)  sum(tot_cat* a b1 b2 landings*) sepby(year)
<</dd_do>>
~~~~

~~~~
<<dd_do:quietly>>
use "${my_outputdir}/`my_common2'_landings_${this_working_year}.dta", replace


qui summ month
local max=r(max)

if `max'<=9{
preserve
use "${my_outputdir}/`my_common2'_landings_${last_year}.dta", clear
keep if month>`max'
replace year=${this_working_year}
tempfile appender
save `appender'
restore
append using `appender'
}
sort year month




format tot_cat* a b1 b2 landings %10.0fc
<</dd_do>>

<<dd_do>>
list , abbreviate(16)  sum(tot_cat* a b1 b2 landings*)
<</dd_do>>
~~~~


Here are the haddock (a, b1, b2) in weights for Calendar Years <<dd_display: %4.0f $two_years>> to <<dd_display: %4.0f $this_working_year>>.  


~~~~
<<dd_do:quietly>>
use "${data_main}/MRIP_${vintage_string}/monthly/haddock_weights_${two_years}.dta", clear

gen ab1_lbs_per_fish=ab1weight/ab1_count
gen b2_lbs_per_fish=b2weight/b2_count
format ab1_lbs_per_fish b2_lbs_per_fish %4.3fc

replace ab1weight=ab1weight/2204
rename ab1weight ab1mt
replace b2weight=b2weight/2204
rename b2weight b2mt


replace b2weight_dead=b2weight_dead/2204
rename b2weight_dead b2dead_mt

sort year month 
format ab1mt b2mt %10.2fc
format ab1_count b2_count %10.0fc
keep if year==$two_years
<</dd_do>>

<<dd_do>>
list year month ab1mt b2mt b2dead_mt ab1_count b2_count ab1_lbs_per_fish b2_lbs_per_fish, abbreviate(16) sum(ab1mt b2mt b2dead_mt  ab1_count b2_count) 
<</dd_do>>
~~~~



~~~~
<<dd_do:quietly>>
use "${data_main}/MRIP_${vintage_string}/monthly/haddock_weights_${last_year}.dta", clear

gen ab1_lbs_per_fish=ab1weight/ab1_count
gen b2_lbs_per_fish=b2weight/b2_count
format ab1_lbs_per_fish b2_lbs_per_fish %4.3fc

replace ab1weight=ab1weight/2204
rename ab1weight ab1mt
replace b2weight=b2weight/2204
rename b2weight b2mt

replace b2weight_dead=b2weight_dead/2204
rename b2weight_dead b2dead_mt

sort year month 
format ab1mt b2mt %10.2fc
format ab1_count b2_count %10.0fc

keep if year==$last_year
<</dd_do>>

<<dd_do>>
list year month ab1mt b2mt b2dead_mt ab1_count b2_count ab1_lbs_per_fish b2_lbs_per_fish, abbreviate(16) sum(ab1mt b2mt b2dead_mt  ab1_count b2_count)
<</dd_do>>
~~~~


~~~~
<<dd_do:quietly>>
use "${data_main}/MRIP_${vintage_string}/monthly/haddock_weights_${this_working_year}.dta", clear


qui summ month
local max=r(max)

if `max'<=9{
preserve
use "${my_outputdir}/haddock_weights_${last_year}.dta", clear
keep if month>`max'
replace year=${this_working_year}
tempfile appender
save `appender'
restore
append using `appender'
}
sort year month




gen ab1_lbs_per_fish=ab1weight/ab1_count
gen b2_lbs_per_fish=b2weight/b2_count
format ab1_lbs_per_fish b2_lbs_per_fish %4.3fc

replace ab1weight=ab1weight/2204
rename ab1weight ab1mt
replace b2weight=b2weight/2204
rename b2weight b2mt

replace b2weight_dead=b2weight_dead/2204
rename b2weight_dead b2dead_mt

sort year month 
format ab1mt b2mt %10.2fc
format ab1_count b2_count %10.0fc

keep if year==$this_working_year
<</dd_do>>
<<dd_do>>
list year month ab1mt b2mt b2dead_mt ab1_count b2_count ab1_lbs_per_fish b2_lbs_per_fish, abbreviate(16) sum(ab1mt b2mt b2dead_mt  ab1_count b2_count)
<</dd_do>>
~~~~





<!---

This is the monthly number of a+b1s of Cod, after we apply the 2b95 method. I don't know how to do the 2b95 method.  I'll just have to read it in when I'm assembling those data.

| Year | Month |Trimmed_Landings|
| :------ | :---- | ------- :|
|2020| 	5 |63|
|2020 |	6 |2,267|
|2020 |	7 |1,465|
|2020 |	8 |3,912|
|2020 |	9 |7,829|
|2020 |	10 |955|
|2020 |	11 |0  |
|2021 |	4 | 1,434|
|2021 |	5  |10|
|2021 |	6  |517|
|2021 |	7  |61|
|2021 |	8  |258 |
--->
